{
  "type": "replace_metadata",
  "version": 2,
  "args": {
    "allow_inconsistency": false,
    "metadata": {
      "version": 3,
      "sources": [
        {
          "name": "default",
          "kind": "postgres",
          "tables": [
            {
              "table": {
                "schema": "public",
                "name": "product_users"
              },
              "object_relationships": [
                {
                  "name": "product",
                  "using": {
                    "foreign_key_constraint_on": "product_id"
                  }
                },
                {
                  "name": "user",
                  "using": {
                    "foreign_key_constraint_on": "user_id"
                  }
                }
              ],
              "insert_permissions": [
                {
                  "role": "manager",
                  "permission": {
                    "check": {},
                    "columns": [
                      "created_at",
                      "expired_at",
                      "id",
                      "product_id",
                      "user_id"
                    ],
                    "backend_only": false
                  }
                },
                {
                  "role": "user",
                  "permission": {
                    "check": {
                      "user_id": {
                        "_eq": "X-Hasura-User-Id"
                      }
                    },
                    "set": {
                      "user_id": "x-hasura-User-Id"
                    },
                    "columns": [
                      "id",
                      "user_id",
                      "product_id",
                      "expired_at",
                      "created_at"
                    ],
                    "backend_only": false
                  }
                }
              ],
              "select_permissions": [
                {
                  "role": "manager",
                  "permission": {
                    "columns": [
                      "created_at",
                      "expired_at",
                      "id",
                      "product_id",
                      "user_id"
                    ],
                    "filter": {}
                  }
                }
              ],
              "update_permissions": [
                {
                  "role": "manager",
                  "permission": {
                    "columns": [
                      "created_at",
                      "expired_at",
                      "id",
                      "product_id",
                      "user_id"
                    ],
                    "filter": {},
                    "check": {}
                  }
                }
              ],
              "delete_permissions": [
                {
                  "role": "manager",
                  "permission": {
                    "filter": {}
                  }
                },
                {
                  "role": "user",
                  "permission": {
                    "filter": {
                      "user_id": {
                        "_eq": "X-Hasura-User-Id"
                      }
                    }
                  }
                }
              ]
            },
            {
              "table": {
                "schema": "public",
                "name": "products"
              },
              "array_relationships": [
                {
                  "name": "product_users",
                  "using": {
                    "foreign_key_constraint_on": {
                      "column": "product_id",
                      "table": {
                        "schema": "public",
                        "name": "product_users"
                      }
                    }
                  }
                }
              ]
            },
            {
              "table": {
                "schema": "public",
                "name": "users"
              },
              "array_relationships": [
                {
                  "name": "product_users",
                  "using": {
                    "foreign_key_constraint_on": {
                      "column": "user_id",
                      "table": {
                        "schema": "public",
                        "name": "product_users"
                      }
                    }
                  }
                }
              ],
              "insert_permissions": [
                {
                  "role": "manager",
                  "permission": {
                    "check": {},
                    "columns": [
                      "id",
                      "name",
                      "email",
                      "created_at"
                    ],
                    "backend_only": false
                  }
                }
              ],
              "select_permissions": [
                {
                  "role": "manager",
                  "permission": {
                    "columns": [
                      "email",
                      "name",
                      "created_at",
                      "id"
                    ],
                    "filter": {}
                  }
                },
                {
                  "role": "user",
                  "permission": {
                    "columns": [
                      "id",
                      "name",
                      "email",
                      "created_at"
                    ],
                    "filter": {
                      "id": {
                        "_eq": "X-Hasura-User-Id"
                      }
                    }
                  }
                }
              ],
              "update_permissions": [
                {
                  "role": "manager",
                  "permission": {
                    "columns": [
                      "email",
                      "name",
                      "created_at",
                      "id"
                    ],
                    "filter": {},
                    "check": {}
                  }
                },
                {
                  "role": "user",
                  "permission": {
                    "columns": [],
                    "filter": {
                      "id": {
                        "_eq": "X-Hasura-User-Id"
                      }
                    },
                    "check": null
                  }
                }
              ],
              "delete_permissions": [
                {
                  "role": "manager",
                  "permission": {
                    "filter": {}
                  }
                }
              ],
              "event_triggers": [
                {
                  "name": "insertedUser",
                  "definition": {
                    "enable_manual": false,
                    "insert": {
                      "columns": "*"
                    }
                  },
                  "retry_conf": {
                    "num_retries": 0,
                    "interval_sec": 10,
                    "timeout_sec": 60
                  },
                  "request_transform": null,
                  "webhook": "http://localhost/hasura_event"
                }
              ]
            }
          ],
          "configuration": {
            "connection_info": {
              "use_prepared_statements": true,
              "database_url": {
                "from_env": "HASURA_GRAPHQL_DATABASE_URL"
              },
              "isolation_level": "read-committed",
              "pool_settings": {
                "connection_lifetime": 600,
                "retries": 1,
                "idle_timeout": 180,
                "max_connections": 50
              }
            }
          }
        }
      ],
      "remote_schemas": [
        {
          "name": "swapi",
          "definition": {
            "url": "https://swapi-graphql.netlify.app/.netlify/functions/index",
            "timeout_seconds": 60,
            "customization": {
              "type_names": {
                "prefix": "swapi_",
                "mapping": {}
              },
              "field_names": [
                {
                  "prefix": "swapi_",
                  "parent_type": "Root",
                  "mapping": {}
                }
              ]
            }
          },
          "comment": "",
          "permissions": [
            {
              "role": "manager",
              "definition": {
                "schema": "schema  { query: Root }\n\ntype Film { characterConnection: FilmCharactersConnection\n  created: String\n  director: String\n  edited: String\n  episodeID: Int\n  id: ID!\n  openingCrawl: String\n  planetConnection: FilmPlanetsConnection\n  producers: [String]\n  releaseDate: String\n  speciesConnection: FilmSpeciesConnection\n  starshipConnection: FilmStarshipsConnection\n  title: String\n  vehicleConnection: FilmVehiclesConnection\n}\n\ntype FilmCharactersConnection { characters: [Person]\n  edges: [FilmCharactersEdge]\n  pageInfo: PageInfo!\n  totalCount: Int\n}\n\ntype FilmCharactersEdge { cursor: String!\n  node: Person\n}\n\ntype FilmPlanetsConnection { edges: [FilmPlanetsEdge]\n  pageInfo: PageInfo!\n  planets: [Planet]\n  totalCount: Int\n}\n\ntype FilmPlanetsEdge { cursor: String!\n  node: Planet\n}\n\ntype FilmSpeciesConnection { edges: [FilmSpeciesEdge]\n  pageInfo: PageInfo!\n  species: [Species]\n  totalCount: Int\n}\n\ntype FilmSpeciesEdge { cursor: String!\n  node: Species\n}\n\ntype FilmStarshipsConnection { edges: [FilmStarshipsEdge]\n  pageInfo: PageInfo!\n  starships: [Starship]\n  totalCount: Int\n}\n\ntype FilmStarshipsEdge { cursor: String!\n  node: Starship\n}\n\ntype FilmVehiclesConnection { edges: [FilmVehiclesEdge]\n  pageInfo: PageInfo!\n  totalCount: Int\n  vehicles: [Vehicle]\n}\n\ntype FilmVehiclesEdge { cursor: String!\n  node: Vehicle\n}\n\ntype PageInfo { endCursor: String\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n}\n\ntype Person { birthYear: String\n  created: String\n  edited: String\n  eyeColor: String\n  filmConnection: PersonFilmsConnection\n  gender: String\n  hairColor: String\n  height: Int\n  homeworld: Planet\n  id: ID!\n  mass: Float\n  name: String\n  skinColor: String\n  species: Species\n  starshipConnection: PersonStarshipsConnection\n  vehicleConnection: PersonVehiclesConnection\n}\n\ntype PersonFilmsConnection { edges: [PersonFilmsEdge]\n  films: [Film]\n  pageInfo: PageInfo!\n  totalCount: Int\n}\n\ntype PersonFilmsEdge { cursor: String!\n  node: Film\n}\n\ntype PersonStarshipsConnection { edges: [PersonStarshipsEdge]\n  pageInfo: PageInfo!\n  starships: [Starship]\n  totalCount: Int\n}\n\ntype PersonStarshipsEdge { cursor: String!\n  node: Starship\n}\n\ntype PersonVehiclesConnection { edges: [PersonVehiclesEdge]\n  pageInfo: PageInfo!\n  totalCount: Int\n  vehicles: [Vehicle]\n}\n\ntype PersonVehiclesEdge { cursor: String!\n  node: Vehicle\n}\n\ntype Planet { climates: [String]\n  created: String\n  diameter: Int\n  edited: String\n  filmConnection: PlanetFilmsConnection\n  gravity: String\n  id: ID!\n  name: String\n  orbitalPeriod: Int\n  population: Float\n  residentConnection: PlanetResidentsConnection\n  rotationPeriod: Int\n  surfaceWater: Float\n  terrains: [String]\n}\n\ntype PlanetFilmsConnection { edges: [PlanetFilmsEdge]\n  films: [Film]\n  pageInfo: PageInfo!\n  totalCount: Int\n}\n\ntype PlanetFilmsEdge { cursor: String!\n  node: Film\n}\n\ntype PlanetResidentsConnection { edges: [PlanetResidentsEdge]\n  pageInfo: PageInfo!\n  residents: [Person]\n  totalCount: Int\n}\n\ntype PlanetResidentsEdge { cursor: String!\n  node: Person\n}\n\ntype Root { starship(id: ID, starshipID: ID): Starship\n}\n\ntype Species { averageHeight: Float\n  averageLifespan: Int\n  classification: String\n  created: String\n  designation: String\n  edited: String\n  eyeColors: [String]\n  filmConnection: SpeciesFilmsConnection\n  hairColors: [String]\n  homeworld: Planet\n  id: ID!\n  language: String\n  name: String\n  personConnection: SpeciesPeopleConnection\n  skinColors: [String]\n}\n\ntype SpeciesFilmsConnection { edges: [SpeciesFilmsEdge]\n  films: [Film]\n  pageInfo: PageInfo!\n  totalCount: Int\n}\n\ntype SpeciesFilmsEdge { cursor: String!\n  node: Film\n}\n\ntype SpeciesPeopleConnection { edges: [SpeciesPeopleEdge]\n  pageInfo: PageInfo!\n  people: [Person]\n  totalCount: Int\n}\n\ntype SpeciesPeopleEdge { cursor: String!\n  node: Person\n}\n\ntype Starship { MGLT: Int\n  cargoCapacity: Float\n  consumables: String\n  costInCredits: Float\n  created: String\n  crew: String\n  edited: String\n  filmConnection: StarshipFilmsConnection\n  hyperdriveRating: Float\n  id: ID!\n  length: Float\n  manufacturers: [String]\n  maxAtmospheringSpeed: Int\n  model: String\n  name: String\n  passengers: String\n  pilotConnection: StarshipPilotsConnection\n  starshipClass: String\n}\n\ntype StarshipFilmsConnection { edges: [StarshipFilmsEdge]\n  films: [Film]\n  pageInfo: PageInfo!\n  totalCount: Int\n}\n\ntype StarshipFilmsEdge { cursor: String!\n  node: Film\n}\n\ntype StarshipPilotsConnection { edges: [StarshipPilotsEdge]\n  pageInfo: PageInfo!\n  pilots: [Person]\n  totalCount: Int\n}\n\ntype StarshipPilotsEdge { cursor: String!\n  node: Person\n}\n\ntype Vehicle { cargoCapacity: Float\n  consumables: String\n  costInCredits: Float\n  created: String\n  crew: String\n  edited: String\n  filmConnection: VehicleFilmsConnection\n  id: ID!\n  length: Float\n  manufacturers: [String]\n  maxAtmospheringSpeed: Int\n  model: String\n  name: String\n  passengers: String\n  pilotConnection: VehiclePilotsConnection\n  vehicleClass: String\n}\n\ntype VehicleFilmsConnection { edges: [VehicleFilmsEdge]\n  films: [Film]\n  pageInfo: PageInfo!\n  totalCount: Int\n}\n\ntype VehicleFilmsEdge { cursor: String!\n  node: Film\n}\n\ntype VehiclePilotsConnection { edges: [VehiclePilotsEdge]\n  pageInfo: PageInfo!\n  pilots: [Person]\n  totalCount: Int\n}\n\ntype VehiclePilotsEdge { cursor: String!\n  node: Person\n}"
              }
            }
          ]
        }
      ],
      "query_collections": [
        {
          "name": "allowed-queries",
          "definition": {
            "queries": [
              {
                "name": "Get Users",
                "query": "query GetUsers {\n  users {\n    id \n    name\n  }\n}"
              },
              {
                "name": "Get Products",
                "query": "query GetProducts {\n  products {\n    id\n    name\n  }\n}"
              }
            ]
          }
        }
      ],
      "allowlist": [
        {
          "collection": "allowed-queries"
        }
      ],
      "actions": [
        {
          "name": "insertProduct",
          "definition": {
            "handler": "http://localhost/hasura_action",
            "output_type": "InsertProductOutput",
            "arguments": [
              {
                "name": "object",
                "type": "InsertProductInput!"
              }
            ],
            "type": "mutation",
            "kind": "synchronous"
          },
          "request_transform": null
        }
      ],
      "custom_types": {
        "input_objects": [
          {
            "name": "InsertProductInput",
            "fields": [
              {
                "name": "name",
                "type": "String!"
              }
            ]
          }
        ],
        "objects": [
          {
            "name": "InsertProductOutput",
            "fields": [
              {
                "name": "id",
                "type": "uuid!"
              }
            ]
          }
        ]
      },
      "rest_endpoints": [
        {
          "definition": {
            "query": {
              "collection_name": "allowed-queries",
              "query_name": "Get Products"
            }
          },
          "url": "products",
          "methods": [
            "GET"
          ],
          "name": "Get Products",
          "comment": null
        },
        {
          "definition": {
            "query": {
              "collection_name": "allowed-queries",
              "query_name": "Get Users"
            }
          },
          "url": "users",
          "methods": [
            "GET"
          ],
          "name": "Get Users",
          "comment": null
        }
      ]
    }
  }
}